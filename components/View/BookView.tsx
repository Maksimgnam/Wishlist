


'use client';
import { viewWish } from '@/interfaces';
import Link from 'next/link';
import React, { FC, useEffect, useState } from 'react';

interface BookViewData {
  params: {
    id: any;
    uid: any;
    wishId: string;
  };
  bookWish: () => void;
}

const BookView: FC<BookViewData> = ({ params, bookWish }) => {
    let emojis = [
    'üòÑ','üòÉ','üòÄ','üòä','‚ò∫','üòâ','üòç','üòò','üòö','üòó','üòô','üòú','üòù','üòõ','üò≥','üòÅ','üòî','üòå','üòí','üòû','üò£','üò¢','üòÇ','üò≠','üò™','üò•','üò∞','üòÖ','üòì','üò©','üò´','üò®','üò±','üò†','üò°','üò§','üòñ','üòÜ','üòã','üò∑','üòé','üò¥','üòµ','üò≤','üòü','üò¶','üòß','üòà','üëø','üòÆ','üò¨','üòê','üòï','üòØ','üò∂','üòá','üòè','üòë','üë≤','üë≥','üëÆ','üë∑','üíÇ','üë∂','üë¶','üëß','üë®','üë©','üë¥','üëµ','üë±','üëº','üë∏','üò∫','üò∏','üòª','üòΩ','üòº','üôÄ','üòø','üòπ','üòæ','üëπ','üë∫','üôà','üôâ','üôä','üíÄ','üëΩ','üí©','üî•','‚ú®','üåü','üí´','üí•','üí¢','üí¶','üíß','üí§','üí®','üëÇ','üëÄ','üëÉ','üëÖ','üëÑ','üëç','üëé','üëå','üëä','‚úä','‚úå','üëã','‚úã','üëê','üëÜ','üëá','üëâ','üëà','üôå','üôè','‚òù','üëè','üí™','üö∂','üèÉ','üíÉ','üë´','üë™','üë¨','üë≠','üíè','üíë','üëØ','üôÜ','üôÖ','üíÅ','üôã','üíÜ','üíá','üíÖ','üë∞','üôé','üôç','üôá','üé©','üëë','üëí','üëü','üëû','üë°','üë†','üë¢','üëï','üëî','üëö','üëó','üéΩ','üëñ','üëò','üëô','üíº','üëú','üëù','üëõ','üëì','üéÄ','üåÇ','üíÑ','üíõ','üíô','üíú','üíö','‚ù§','üíî','üíó','üíì','üíï','üíñ','üíû','üíò','üíå','üíã','üíç','üíé','üë§','üë•','üí¨','üë£','üí≠','üê∂','üê∫','üê±','üê≠','üêπ','üê∞','üê∏','üêØ','üê®','üêª','üê∑','üêΩ','üêÆ','üêó','üêµ','üêí','üê¥','üêë','üêò','üêº','üêß','üê¶','üê§','üê•','üê£','üêî','üêç','üê¢','üêõ','üêù','üêú','üêû','üêå','üêô','üêö','üê†','üêü','üê¨','üê≥','üêã','üêÑ','üêè','üêÄ','üêÉ','üêÖ','üêá','üêâ','üêé','üêê','üêì','üêï','üêñ','üêÅ','üêÇ','üê≤','üê°','üêä','üê´','üê™','üêÜ','üêà','üê©','üêæ','üíê','üå∏','üå∑','üçÄ','üåπ','üåª','üå∫','üçÅ','üçÉ','üçÇ','üåø','üåæ','üçÑ','üåµ','üå¥','üå≤','üå≥','üå∞','üå±','üåº','üåê','üåû','üåù','üåö','üåë','üåí','üåì','üåî','üåï','üåñ','üåó','üåò','üåú','üåõ','üåô','üåç','üåé','üåè','üåã','üåå','üå†','‚≠ê','‚òÄ','‚õÖ','‚òÅ','‚ö°','‚òî','‚ùÑ','‚õÑ','üåÄ','üåÅ','üåà','üåä','üéç','üíù','üéé','üéí','üéì','üéè','üéÜ','üéá','üéê','üéë','üéÉ','üëª','üéÖ','üéÑ','üéÅ','üéã','üéâ','üéä','üéà','üéå','üîÆ','üé•','üì∑','üìπ','üìº','üíø','üìÄ','üíΩ','üíæ','üíª','üì±','‚òé','üìû','üìü','üì†','üì°','üì∫','üìª','üîä','üîâ','üîà','üîá','üîî','üîï','üì¢','üì£','‚è≥','‚åõ','‚è∞','‚åö','üîì','üîí','üîè','üîê','üîë','üîé','üí°','üî¶','üîÜ','üîÖ','üîå','üîã','üîç','üõÅ','üõÄ','üöø','üöΩ','üîß','üî©','üî®','üö™','üö¨','üí£','üî´','üî™','üíä','üíâ','üí∞','üí¥','üíµ','üí∑','üí∂','üí≥','üí∏','üì≤','üìß','üì•','üì§','‚úâ','üì©','üì®','üìØ','üì´','üì™','üì¨','üì≠','üìÆ','üì¶','üìù','üìÑ','üìÉ','üìë','üìä','üìà','üìâ','üìú','üìã','üìÖ','üìÜ','üìá','üìÅ','üìÇ','‚úÇ','üìå','üìé','‚úí','‚úè','üìè','üìê','üìï','üìó','üìò','üìô','üìì','üìî','üìí','üìö','üìñ','üîñ','üìõ','üî¨','üî≠','üì∞','üé®','üé¨','üé§','üéß','üéº','üéµ','üé∂','üéπ','üéª','üé∫','üé∑','üé∏','üëæ','üéÆ','üÉè','üé¥','üÄÑ','üé≤','üéØ','üèà','üèÄ','‚öΩ','‚öæ','üéæ','üé±','üèâ','üé≥','‚õ≥','üöµ','üö¥','üèÅ','üèá','üèÜ','üéø','üèÇ','üèä','üèÑ','üé£','‚òï','üçµ','üç∂','üçº','üç∫','üçª','üç∏','üçπ','üç∑','üç¥','üçï','üçî','üçü','üçó','üçñ','üçù','üçõ','üç§','üç±','üç£','üç•','üçô','üçò','üçö','üçú','üç≤','üç¢','üç°','üç≥','üçû','üç©','üçÆ','üç¶','üç®','üçß','üéÇ','üç∞','üç™','üç´','üç¨','üç≠','üçØ','üçé','üçè','üçä','üçã','üçí','üçá','üçâ','üçì','üçë','üçà','üçå','üçê','üçç','üç†','üçÜ','üçÖ','üåΩ','üè†','üè°','üè´','üè¢','üè£','üè•','üè¶','üè™','üè©','üè®','üíí','‚õ™','üè¨','üè§','üåá','üåÜ','üèØ','üè∞','‚õ∫','üè≠','üóº','üóæ','üóª','üåÑ','üåÖ','üåÉ','üóΩ','üåâ','üé†','üé°','‚õ≤','üé¢','üö¢','‚õµ','üö§','üö£','‚öì','üöÄ','‚úà','üí∫','üöÅ','üöÇ','üöä','üöâ','üöû','üöÜ','üöÑ','üöÖ','üöà','üöá','üöù','üöã','üöÉ','üöé','üöå','üöç','üöô','üöò','üöó','üöï','üöñ','üöõ','üöö','üö®','üöì','üöî','üöí','üöë','üöê','üö≤','üö°','üöü','üö†','üöú','üíà','üöè','üé´','üö¶','üö•','‚ö†','üöß','üî∞','‚õΩ','üèÆ','üé∞','‚ô®','üóø','üé™','üé≠','üìç','üö©','‚¨Ü','‚¨á','‚¨Ö','‚û°','üî†','üî°','üî§','‚Üó','‚Üñ','‚Üò','‚Üô','‚Üî','‚Üï','üîÑ','‚óÄ','‚ñ∂','üîº','üîΩ','‚Ü©','‚Ü™','‚Ñπ','‚è™','‚è©','‚è´','‚è¨','‚§µ','‚§¥','üÜó','üîÄ','üîÅ','üîÇ','üÜï','üÜô','üÜí','üÜì','üÜñ','üì∂','üé¶','üàÅ','üàØ','üà≥','üàµ','üà¥','üà≤','üâê','üàπ','üà∫','üà∂','üàö','üöª','üöπ','üö∫','üöº','üöæ','üö∞','üöÆ','üÖø','‚ôø','üö≠','üà∑','üà∏','üàÇ','‚ìÇ','üõÇ','üõÑ','üõÖ','üõÉ','üâë','„äô','„äó','üÜë','üÜò','üÜî','üö´','üîû','üìµ','üöØ','üö±','üö≥','üö∑','üö∏','‚õî','‚ú≥','‚ùá','‚ùé','‚úÖ','‚ú¥','üíü','üÜö','üì≥','üì¥','üÖ∞','üÖ±','üÜé','üÖæ','üí†','‚ûø','‚ôª','‚ôà','‚ôâ','‚ôä','‚ôã','‚ôå','‚ôç','‚ôé','‚ôè','‚ôê','‚ôë','‚ôí','‚ôì','‚õé','üîØ','üèß','üíπ','üí≤','üí±','¬©','¬Æ','‚Ñ¢','„ÄΩ','„Ä∞','üîù','üîö','üîô','üîõ','üîú','‚ùå','‚≠ï','‚ùó','‚ùì','‚ùï','‚ùî','üîÉ','üïõ','üïß','üïê','üïú','üïë','üïù','üïí','üïû','üïì','üïü','üïî','üï†','üïï','üïñ','üïó','üïò','üïô','üïö','üï°','üï¢','üï£','üï§','üï•','üï¶','‚úñ','‚ûï','‚ûñ','‚ûó','‚ô†','‚ô•','‚ô£','‚ô¶','üíÆ','üíØ','‚úî','‚òë','üîò','üîó','‚û∞','üî±','üî≤','üî≥','‚óº','‚óª','‚óæ','‚óΩ','‚ñ™','‚ñ´','üî∫','‚¨ú','‚¨õ','‚ö´','‚ö™','üî¥','üîµ','üîª','üî∂','üî∑','üî∏','üîπ'
    ]
  const getRandomEmoji = () => emojis[Math.floor(Math.random() * emojis.length)];
  const randomEmojis = Array.from({ length: 5 }, getRandomEmoji).join('');

  const [wish, setWish] = useState<viewWish | null>(null);
  const [wishData, setWishData] = useState({
    to: '',
    verification_code: randomEmojis
  });
  const [enteredCode, setEnteredCode] = useState('');
  const [isSendCode, setIsSendCode] = useState<boolean>(true)
  const [isVerify, setIsVerify] = useState<boolean>(false)
  const [loading, setLoading] = useState<boolean>(true);
  const [verificationSuccess, setVerificationSuccess] = useState<boolean | null>(null);

  useEffect(() => {
    const fetchWish = async () => {
      setLoading(true);
      try {
        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/wishlist/${params.id}/wish/${params.wishId}`);
        const data = await response.json();
        setWish(data);
      } catch (error) {
        console.log(error);
      } finally {
        setLoading(false);
      }
    };

    fetchWish();
  }, [params.id, params.wishId]);

  const sendVerificationEmail = async () => {
    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(wishData)
      });
      setIsVerify(true)
      setIsSendCode(false)

      const result = await response.json();
      return result;
    
    } catch (error) {
      console.log('Error sending email', error);
    }
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setWishData({
      ...wishData,
      [e.target.name]: e.target.value
    });
  };

  const handleCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setEnteredCode(e.target.value);
  };

  const handleVerifyCode = () => {
    if (enteredCode === wishData.verification_code) {
      setVerificationSuccess(true);
      alert("You're verified and booked it üòÄ")
      bookWish();
    } else {
      setVerificationSuccess(false);
    }
  };

  return (
    <>
    {
      isSendCode &&    <div>
      <div className='w-64 h-8 flex items-center justify-end mb-3'>
        <Link href={`/view/${params.id}`}>
          <button className='w-5 h-5 bg-black rounded-full relative left-10'>
            <p className='text-mini text-white font-medium'>x</p>
          </button>
        </Link>
      </div>
      <div className='sm:w-64 w-72 sm:h-60 h-64 rounded-lg border shadow-2xl flex flex-col justify-between p-4'>
        <div className='w-auto h-auto flex items-center'>
          <div className='w-7 h-7 bg-yellow-200 rounded flex items-center justify-center'>
            <p>üéÅ</p>
          </div>
          <h2 className='text-lg pl-2'>{wish?.title}</h2>
        </div>

        <div>
          {wish?.isBooked ? (
            <div>booked</div>
          ) : (
            <div className='flex items-center'>
              <p className='text-md'>Status:</p>
              <div className='w-24 h-6 bg-red-200 text-red-400 text-sm rounded flex items-center justify-center ml-2'>
                not booked
              </div>
            </div>
          )}
        </div>

        <input
          type='email'
          name='to'
          id='to'
          value={wishData.to}
          onChange={handleChange}
          className='w-full h-10 text-sm rounded flex border resize-none outline-none pl-1'
          placeholder='Write your email for validation'
        />

    <button onClick={sendVerificationEmail} className='w-full h-11 bg-yellow-300 text-md font-medium rounded'>
          Book
        </button>


      </div>
    </div>
    }
 
    {
      isVerify &&  <div className='w-56 h-36  flex flex-col items-center justify-around'>
      <h2 className='text-xl'>Verify code üòÇ</h2>


        <input
          type='text'
          name='enteredCode'
          id='enteredCode'
          value={enteredCode}
          onChange={handleCodeChange}
          className='w-full h-10 text-sm rounded flex border resize-none outline-none pl-1 mt-3'
          placeholder='Enter verification code'
        />

        <button onClick={handleVerifyCode} className='w-full h-11 bg-green-300 text-md font-medium rounded mt-2'>
          Verify 
        </button>

        {verificationSuccess === true && <p className='text-green-500 mt-2'>Verification successful! You booked it</p>}
        {verificationSuccess === false && <p className='text-red-500 mt-2'>Verification failed. Try again.</p>}
    </div>
    }
    
    </>

  );
};

export default BookView;
